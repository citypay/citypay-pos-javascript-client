/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CityPayPosApi);
  }
}(this, function(expect, CityPayPosApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CityPayPosApi.TransactionData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionData', function() {
    it('should create an instance of TransactionData', function() {
      // uncomment below and update the code to test TransactionData
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be.a(CityPayPosApi.TransactionData);
    });

    it('should have the property additionalData (base name: "additional_data")', function() {
      // uncomment below and update the code to test the property additionalData
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property auxiliaryData (base name: "auxiliary_data")', function() {
      // uncomment below and update the code to test the property auxiliaryData
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property cardType (base name: "card_type")', function() {
      // uncomment below and update the code to test the property cardType
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property completedAt (base name: "completed_at")', function() {
      // uncomment below and update the code to test the property completedAt
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property currencySymbol (base name: "currency_symbol")', function() {
      // uncomment below and update the code to test the property currencySymbol
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property declinedByCard (base name: "declined_by_card")', function() {
      // uncomment below and update the code to test the property declinedByCard
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvAppCryptogram (base name: "emv_app_cryptogram")', function() {
      // uncomment below and update the code to test the property emvAppCryptogram
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvAppExpirationDate (base name: "emv_app_expiration_date")', function() {
      // uncomment below and update the code to test the property emvAppExpirationDate
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvAppTxnCounter (base name: "emv_app_txn_counter")', function() {
      // uncomment below and update the code to test the property emvAppTxnCounter
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvAuthorizedAmount (base name: "emv_authorized_amount")', function() {
      // uncomment below and update the code to test the property emvAuthorizedAmount
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvCardholderVerificationResults (base name: "emv_cardholder_verification_results")', function() {
      // uncomment below and update the code to test the property emvCardholderVerificationResults
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvCountryCode (base name: "emv_country_code")', function() {
      // uncomment below and update the code to test the property emvCountryCode
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvCryptogramInfoData (base name: "emv_cryptogram_info_data")', function() {
      // uncomment below and update the code to test the property emvCryptogramInfoData
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvIccAppid (base name: "emv_icc_appid")', function() {
      // uncomment below and update the code to test the property emvIccAppid
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvInterchangeProfile (base name: "emv_interchange_profile")', function() {
      // uncomment below and update the code to test the property emvInterchangeProfile
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvIssuerAppData (base name: "emv_issuer_app_data")', function() {
      // uncomment below and update the code to test the property emvIssuerAppData
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvPanSeqNum (base name: "emv_pan_seq_num")', function() {
      // uncomment below and update the code to test the property emvPanSeqNum
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTerminalCapabilities (base name: "emv_terminal_capabilities")', function() {
      // uncomment below and update the code to test the property emvTerminalCapabilities
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTerminalType (base name: "emv_terminal_type")', function() {
      // uncomment below and update the code to test the property emvTerminalType
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTerminalVerificationResults (base name: "emv_terminal_verification_results")', function() {
      // uncomment below and update the code to test the property emvTerminalVerificationResults
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTrack2Equivalent (base name: "emv_track2_equivalent")', function() {
      // uncomment below and update the code to test the property emvTrack2Equivalent
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTxnCurrencyCode (base name: "emv_txn_currency_code")', function() {
      // uncomment below and update the code to test the property emvTxnCurrencyCode
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTxnDate (base name: "emv_txn_date")', function() {
      // uncomment below and update the code to test the property emvTxnDate
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTxnStatusInfo (base name: "emv_txn_status_info")', function() {
      // uncomment below and update the code to test the property emvTxnStatusInfo
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTxnType (base name: "emv_txn_type")', function() {
      // uncomment below and update the code to test the property emvTxnType
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property emvTxnUnpredictableNumber (base name: "emv_txn_unpredictable_number")', function() {
      // uncomment below and update the code to test the property emvTxnUnpredictableNumber
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property isCommercialCard (base name: "is_commercial_card")', function() {
      // uncomment below and update the code to test the property isCommercialCard
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property isContactless (base name: "is_contactless")', function() {
      // uncomment below and update the code to test the property isContactless
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property isFallback (base name: "is_fallback")', function() {
      // uncomment below and update the code to test the property isFallback
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property isOffline (base name: "is_offline")', function() {
      // uncomment below and update the code to test the property isOffline
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property isVoided (base name: "is_voided")', function() {
      // uncomment below and update the code to test the property isVoided
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property responseCode (base name: "response_code")', function() {
      // uncomment below and update the code to test the property responseCode
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property responseText (base name: "response_text")', function() {
      // uncomment below and update the code to test the property responseText
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property result (base name: "result")', function() {
      // uncomment below and update the code to test the property result
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property scheme (base name: "scheme")', function() {
      // uncomment below and update the code to test the property scheme
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property signatureRequired (base name: "signature_required")', function() {
      // uncomment below and update the code to test the property signatureRequired
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property terminalId (base name: "terminal_id")', function() {
      // uncomment below and update the code to test the property terminalId
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property totalAmount (base name: "total_amount")', function() {
      // uncomment below and update the code to test the property totalAmount
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property transactionType (base name: "transaction_type")', function() {
      // uncomment below and update the code to test the property transactionType
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

    it('should have the property verifiedByPin (base name: "verified_by_pin")', function() {
      // uncomment below and update the code to test the property verifiedByPin
      //var instane = new CityPayPosApi.TransactionData();
      //expect(instance).to.be();
    });

  });

}));
