/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DeviceInfo from './model/DeviceInfo';
import PrintRequest from './model/PrintRequest';
import Receipt from './model/Receipt';
import Result from './model/Result';
import ReversalRequest from './model/ReversalRequest';
import SaleRequest from './model/SaleRequest';
import SaleResponse from './model/SaleResponse';
import SuccessResponse from './model/SuccessResponse';
import TransactionData from './model/TransactionData';
import TransactionProgress from './model/TransactionProgress';
import TransactionResult from './model/TransactionResult';
import DeviceModuleApi from './api/DeviceModuleApi';
import PaymentModuleApi from './api/PaymentModuleApi';


/**
* CityPay_Point_of_Sale_API_for_payment_with_card_present_devices_including_EMV_readers_and_contactless_POS_readers_The_API_is_available_from_httpsgithub_comcitypaycitypay_pos_apiThe_API_makes_it_simple_to_add_EMV_and_contactless_card_acceptance_to_iOS_Android_Tablet_and_desktop_applicaitons_using_a_HTTPS_protocol__It_segregates_the_complexity_of_payment_processing_from_the_sales_environment_and_eliminates_any_necessity_for_the_target_system_to_handle_card_data_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CityPayPosApi = require('index'); // See note below*.
* var xxxSvc = new CityPayPosApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CityPayPosApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CityPayPosApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CityPayPosApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DeviceInfo model constructor.
     * @property {module:model/DeviceInfo}
     */
    DeviceInfo,

    /**
     * The PrintRequest model constructor.
     * @property {module:model/PrintRequest}
     */
    PrintRequest,

    /**
     * The Receipt model constructor.
     * @property {module:model/Receipt}
     */
    Receipt,

    /**
     * The Result model constructor.
     * @property {module:model/Result}
     */
    Result,

    /**
     * The ReversalRequest model constructor.
     * @property {module:model/ReversalRequest}
     */
    ReversalRequest,

    /**
     * The SaleRequest model constructor.
     * @property {module:model/SaleRequest}
     */
    SaleRequest,

    /**
     * The SaleResponse model constructor.
     * @property {module:model/SaleResponse}
     */
    SaleResponse,

    /**
     * The SuccessResponse model constructor.
     * @property {module:model/SuccessResponse}
     */
    SuccessResponse,

    /**
     * The TransactionData model constructor.
     * @property {module:model/TransactionData}
     */
    TransactionData,

    /**
     * The TransactionProgress model constructor.
     * @property {module:model/TransactionProgress}
     */
    TransactionProgress,

    /**
     * The TransactionResult model constructor.
     * @property {module:model/TransactionResult}
     */
    TransactionResult,

    /**
    * The DeviceModuleApi service constructor.
    * @property {module:api/DeviceModuleApi}
    */
    DeviceModuleApi,

    /**
    * The PaymentModuleApi service constructor.
    * @property {module:api/PaymentModuleApi}
    */
    PaymentModuleApi
};
