/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceInfo from '../model/DeviceInfo';
import Result from '../model/Result';

/**
* DeviceModule service.
* @module api/DeviceModuleApi
* @version 1.0.0
*/
export default class DeviceModuleApi {

    /**
    * Constructs a new DeviceModuleApi. 
    * @alias module:api/DeviceModuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceInfo operation.
     * @callback module:api/DeviceModuleApi~deviceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Device Information
     * Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
     * @param {String} deviceId The name of the target device used by the API.
     * @param {module:api/DeviceModuleApi~deviceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInfo}
     */
    deviceInfo(deviceId, callback) {
      let postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceInfo");
      }


      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceInfo;

      return this.apiClient.callApi(
        '/device/{deviceId}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/DeviceModuleApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Device Ping
     * To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
     * @param {String} deviceId The name of the target device used by the API.
     * @param {module:api/DeviceModuleApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    ping(deviceId, callback) {
      let postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling ping");
      }


      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/device/{deviceId}/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
