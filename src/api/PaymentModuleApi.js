/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Result from '../model/Result';
import ReversalRequest from '../model/ReversalRequest';
import SaleRequest from '../model/SaleRequest';
import SaleResponse from '../model/SaleResponse';
import SuccessResponse from '../model/SuccessResponse';
import TransactionProgress from '../model/TransactionProgress';
import TransactionResult from '../model/TransactionResult';

/**
* PaymentModule service.
* @module api/PaymentModuleApi
* @version 1.0.0
*/
export default class PaymentModuleApi {

    /**
    * Constructs a new PaymentModuleApi. 
    * @alias module:api/PaymentModuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the receipt operation.
     * @callback module:api/PaymentModuleApi~receiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receipt Print
     * Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionProgress} opts.body 
     * @param {module:api/PaymentModuleApi~receiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResult}
     */
    receipt(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResult;

      return this.apiClient.callApi(
        '/receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refund operation.
     * @callback module:api/PaymentModuleApi~refundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund Transaction
     * Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
     * @param {module:model/SaleRequest} body 
     * @param {module:api/PaymentModuleApi~refundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleResponse}
     */
    refund(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refund");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaleResponse;

      return this.apiClient.callApi(
        '/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reversal operation.
     * @callback module:api/PaymentModuleApi~reversalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reversal Tranasction
     * Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
     * @param {module:model/ReversalRequest} body 
     * @param {module:api/PaymentModuleApi~reversalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleResponse}
     */
    reversal(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reversal");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaleResponse;

      return this.apiClient.callApi(
        '/reversal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sale operation.
     * @callback module:api/PaymentModuleApi~saleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sale Transaction
     * Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
     * @param {module:model/SaleRequest} body 
     * @param {module:api/PaymentModuleApi~saleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleResponse}
     */
    sale(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sale");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaleResponse;

      return this.apiClient.callApi(
        '/sale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transaction operation.
     * @callback module:api/PaymentModuleApi~transactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction Status
     * Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionProgress} opts.body 
     * @param {module:api/PaymentModuleApi~transactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResult}
     */
    transaction(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResult;

      return this.apiClient.callApi(
        '/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
